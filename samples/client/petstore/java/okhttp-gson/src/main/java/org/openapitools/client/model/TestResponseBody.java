/*
 * OpenAPI Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestResponseBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TestResponseBody {
  public static final String SERIALIZED_NAME_REQUIRED_FIELD = "requiredField";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FIELD)
  private String requiredField;

  public static final String SERIALIZED_NAME_REQUIRED_NULLABLE_FIELD = "requiredNullableField";
  @SerializedName(SERIALIZED_NAME_REQUIRED_NULLABLE_FIELD)
  private String requiredNullableField;

  public static final String SERIALIZED_NAME_OPTIONAL_FIELD = "optionalField";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_FIELD)
  private String optionalField;

  public static final String SERIALIZED_NAME_OPTIONAL_NULLABLE_FIELD = "optionalNullableField";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_NULLABLE_FIELD)
  private String optionalNullableField;

  public static final String SERIALIZED_NAME_REQUIRED_ARRAY_FIELD = "requiredArrayField";
  @SerializedName(SERIALIZED_NAME_REQUIRED_ARRAY_FIELD)
  private List<String> requiredArrayField = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_NULLABLE_ARRAY_FIELD = "requiredNullableArrayField";
  @SerializedName(SERIALIZED_NAME_REQUIRED_NULLABLE_ARRAY_FIELD)
  private List<String> requiredNullableArrayField = null;

  public static final String SERIALIZED_NAME_OPTIONAL_ARRAY_FIELD = "optionalArrayField";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_ARRAY_FIELD)
  private List<String> optionalArrayField = null;

  public static final String SERIALIZED_NAME_OPTIONAL_NULLABLE_ARRAY_FIELD = "optionalNullableArrayField";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_NULLABLE_ARRAY_FIELD)
  private List<String> optionalNullableArrayField = null;

  public static final String SERIALIZED_NAME_REQUIRED_OBJECT_FIELD = "requiredObjectField";
  @SerializedName(SERIALIZED_NAME_REQUIRED_OBJECT_FIELD)
  private Object requiredObjectField;

  public static final String SERIALIZED_NAME_REQUIRED_NULLABLE_OBJECT_FIELD = "requiredNullableObjectField";
  @SerializedName(SERIALIZED_NAME_REQUIRED_NULLABLE_OBJECT_FIELD)
  private Object requiredNullableObjectField;

  public static final String SERIALIZED_NAME_OPTIONAL_OBJECT_FIELD = "optionalObjectField";
  @SerializedName(SERIALIZED_NAME_OPTIONAL_OBJECT_FIELD)
  private Object optionalObjectField;

  public static final String SERIALIZED_NAME_NULLABLE_OBJECT_FIELD = "nullableObjectField";
  @SerializedName(SERIALIZED_NAME_NULLABLE_OBJECT_FIELD)
  private Object nullableObjectField;

  public TestResponseBody() { 
  }

  public TestResponseBody requiredField(String requiredField) {
    
    this.requiredField = requiredField;
    return this;
  }

   /**
   * Get requiredField
   * @return requiredField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRequiredField() {
    return requiredField;
  }


  public void setRequiredField(String requiredField) {
    this.requiredField = requiredField;
  }


  public TestResponseBody requiredNullableField(String requiredNullableField) {
    
    this.requiredNullableField = requiredNullableField;
    return this;
  }

   /**
   * Get requiredNullableField
   * @return requiredNullableField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRequiredNullableField() {
    return requiredNullableField;
  }


  public void setRequiredNullableField(String requiredNullableField) {
    this.requiredNullableField = requiredNullableField;
  }


  public TestResponseBody optionalField(String optionalField) {
    
    this.optionalField = optionalField;
    return this;
  }

   /**
   * Get optionalField
   * @return optionalField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOptionalField() {
    return optionalField;
  }


  public void setOptionalField(String optionalField) {
    this.optionalField = optionalField;
  }


  public TestResponseBody optionalNullableField(String optionalNullableField) {
    
    this.optionalNullableField = optionalNullableField;
    return this;
  }

   /**
   * Get optionalNullableField
   * @return optionalNullableField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOptionalNullableField() {
    return optionalNullableField;
  }


  public void setOptionalNullableField(String optionalNullableField) {
    this.optionalNullableField = optionalNullableField;
  }


  public TestResponseBody requiredArrayField(List<String> requiredArrayField) {
    
    this.requiredArrayField = requiredArrayField;
    return this;
  }

  public TestResponseBody addRequiredArrayFieldItem(String requiredArrayFieldItem) {
    this.requiredArrayField.add(requiredArrayFieldItem);
    return this;
  }

   /**
   * Get requiredArrayField
   * @return requiredArrayField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getRequiredArrayField() {
    return requiredArrayField;
  }


  public void setRequiredArrayField(List<String> requiredArrayField) {
    this.requiredArrayField = requiredArrayField;
  }


  public TestResponseBody requiredNullableArrayField(List<String> requiredNullableArrayField) {
    
    this.requiredNullableArrayField = requiredNullableArrayField;
    return this;
  }

  public TestResponseBody addRequiredNullableArrayFieldItem(String requiredNullableArrayFieldItem) {
    if (this.requiredNullableArrayField == null) {
      this.requiredNullableArrayField = new ArrayList<>();
    }
    this.requiredNullableArrayField.add(requiredNullableArrayFieldItem);
    return this;
  }

   /**
   * Get requiredNullableArrayField
   * @return requiredNullableArrayField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getRequiredNullableArrayField() {
    return requiredNullableArrayField;
  }


  public void setRequiredNullableArrayField(List<String> requiredNullableArrayField) {
    this.requiredNullableArrayField = requiredNullableArrayField;
  }


  public TestResponseBody optionalArrayField(List<String> optionalArrayField) {
    
    this.optionalArrayField = optionalArrayField;
    return this;
  }

  public TestResponseBody addOptionalArrayFieldItem(String optionalArrayFieldItem) {
    if (this.optionalArrayField == null) {
      this.optionalArrayField = new ArrayList<>();
    }
    this.optionalArrayField.add(optionalArrayFieldItem);
    return this;
  }

   /**
   * Get optionalArrayField
   * @return optionalArrayField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOptionalArrayField() {
    return optionalArrayField;
  }


  public void setOptionalArrayField(List<String> optionalArrayField) {
    this.optionalArrayField = optionalArrayField;
  }


  public TestResponseBody optionalNullableArrayField(List<String> optionalNullableArrayField) {
    
    this.optionalNullableArrayField = optionalNullableArrayField;
    return this;
  }

  public TestResponseBody addOptionalNullableArrayFieldItem(String optionalNullableArrayFieldItem) {
    if (this.optionalNullableArrayField == null) {
      this.optionalNullableArrayField = new ArrayList<>();
    }
    this.optionalNullableArrayField.add(optionalNullableArrayFieldItem);
    return this;
  }

   /**
   * Get optionalNullableArrayField
   * @return optionalNullableArrayField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getOptionalNullableArrayField() {
    return optionalNullableArrayField;
  }


  public void setOptionalNullableArrayField(List<String> optionalNullableArrayField) {
    this.optionalNullableArrayField = optionalNullableArrayField;
  }


  public TestResponseBody requiredObjectField(Object requiredObjectField) {
    
    this.requiredObjectField = requiredObjectField;
    return this;
  }

   /**
   * Get requiredObjectField
   * @return requiredObjectField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Object getRequiredObjectField() {
    return requiredObjectField;
  }


  public void setRequiredObjectField(Object requiredObjectField) {
    this.requiredObjectField = requiredObjectField;
  }


  public TestResponseBody requiredNullableObjectField(Object requiredNullableObjectField) {
    
    this.requiredNullableObjectField = requiredNullableObjectField;
    return this;
  }

   /**
   * Get requiredNullableObjectField
   * @return requiredNullableObjectField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getRequiredNullableObjectField() {
    return requiredNullableObjectField;
  }


  public void setRequiredNullableObjectField(Object requiredNullableObjectField) {
    this.requiredNullableObjectField = requiredNullableObjectField;
  }


  public TestResponseBody optionalObjectField(Object optionalObjectField) {
    
    this.optionalObjectField = optionalObjectField;
    return this;
  }

   /**
   * Get optionalObjectField
   * @return optionalObjectField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getOptionalObjectField() {
    return optionalObjectField;
  }


  public void setOptionalObjectField(Object optionalObjectField) {
    this.optionalObjectField = optionalObjectField;
  }


  public TestResponseBody nullableObjectField(Object nullableObjectField) {
    
    this.nullableObjectField = nullableObjectField;
    return this;
  }

   /**
   * Get nullableObjectField
   * @return nullableObjectField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getNullableObjectField() {
    return nullableObjectField;
  }


  public void setNullableObjectField(Object nullableObjectField) {
    this.nullableObjectField = nullableObjectField;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  public TestResponseBody putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestResponseBody testResponseBody = (TestResponseBody) o;
    return Objects.equals(this.requiredField, testResponseBody.requiredField) &&
        Objects.equals(this.requiredNullableField, testResponseBody.requiredNullableField) &&
        Objects.equals(this.optionalField, testResponseBody.optionalField) &&
        Objects.equals(this.optionalNullableField, testResponseBody.optionalNullableField) &&
        Objects.equals(this.requiredArrayField, testResponseBody.requiredArrayField) &&
        Objects.equals(this.requiredNullableArrayField, testResponseBody.requiredNullableArrayField) &&
        Objects.equals(this.optionalArrayField, testResponseBody.optionalArrayField) &&
        Objects.equals(this.optionalNullableArrayField, testResponseBody.optionalNullableArrayField) &&
        Objects.equals(this.requiredObjectField, testResponseBody.requiredObjectField) &&
        Objects.equals(this.requiredNullableObjectField, testResponseBody.requiredNullableObjectField) &&
        Objects.equals(this.optionalObjectField, testResponseBody.optionalObjectField) &&
        Objects.equals(this.nullableObjectField, testResponseBody.nullableObjectField)&&
        Objects.equals(this.additionalProperties, testResponseBody.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(requiredField, requiredNullableField, optionalField, optionalNullableField, requiredArrayField, requiredNullableArrayField, optionalArrayField, optionalNullableArrayField, requiredObjectField, requiredNullableObjectField, optionalObjectField, nullableObjectField, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestResponseBody {\n");
    sb.append("    requiredField: ").append(toIndentedString(requiredField)).append("\n");
    sb.append("    requiredNullableField: ").append(toIndentedString(requiredNullableField)).append("\n");
    sb.append("    optionalField: ").append(toIndentedString(optionalField)).append("\n");
    sb.append("    optionalNullableField: ").append(toIndentedString(optionalNullableField)).append("\n");
    sb.append("    requiredArrayField: ").append(toIndentedString(requiredArrayField)).append("\n");
    sb.append("    requiredNullableArrayField: ").append(toIndentedString(requiredNullableArrayField)).append("\n");
    sb.append("    optionalArrayField: ").append(toIndentedString(optionalArrayField)).append("\n");
    sb.append("    optionalNullableArrayField: ").append(toIndentedString(optionalNullableArrayField)).append("\n");
    sb.append("    requiredObjectField: ").append(toIndentedString(requiredObjectField)).append("\n");
    sb.append("    requiredNullableObjectField: ").append(toIndentedString(requiredNullableObjectField)).append("\n");
    sb.append("    optionalObjectField: ").append(toIndentedString(optionalObjectField)).append("\n");
    sb.append("    nullableObjectField: ").append(toIndentedString(nullableObjectField)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requiredField");
    openapiFields.add("requiredNullableField");
    openapiFields.add("optionalField");
    openapiFields.add("optionalNullableField");
    openapiFields.add("requiredArrayField");
    openapiFields.add("requiredNullableArrayField");
    openapiFields.add("optionalArrayField");
    openapiFields.add("optionalNullableArrayField");
    openapiFields.add("requiredObjectField");
    openapiFields.add("requiredNullableObjectField");
    openapiFields.add("optionalObjectField");
    openapiFields.add("nullableObjectField");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requiredField");
    openapiRequiredFields.add("requiredArrayField");
    openapiRequiredFields.add("requiredObjectField");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TestResponseBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (TestResponseBody.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestResponseBody is not found in the empty JSON string", TestResponseBody.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestResponseBody.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("requiredField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredField").toString()));
      }
      if (jsonObj.get("requiredNullableField") != null && !jsonObj.get("requiredNullableField").isJsonPrimitive() && !jsonObj.get("requiredNullableField").isJsonNull()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredNullableField` to be a primitive type or null in the JSON string but got `%s`", jsonObj.get("requiredNullableField").toString()));
      }
      if (jsonObj.get("optionalField") != null && !jsonObj.get("optionalField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionalField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionalField").toString()));
      }
      if (jsonObj.get("optionalNullableField") != null && !jsonObj.get("optionalNullableField").isJsonPrimitive() && !jsonObj.get("optionalNullableField").isJsonNull()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionalNullableField` to be a primitive type or null in the JSON string but got `%s`", jsonObj.get("optionalNullableField").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("requiredArrayField").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredArrayField` to be an array in the JSON string but got `%s`", jsonObj.get("requiredArrayField").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("requiredNullableArrayField") != null && !jsonObj.get("requiredNullableArrayField").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredNullableArrayField` to be an array in the JSON string but got `%s`", jsonObj.get("requiredNullableArrayField").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("optionalArrayField") != null && !jsonObj.get("optionalArrayField").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionalArrayField` to be an array in the JSON string but got `%s`", jsonObj.get("optionalArrayField").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("optionalNullableArrayField") != null && !jsonObj.get("optionalNullableArrayField").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionalNullableArrayField` to be an array in the JSON string but got `%s`", jsonObj.get("optionalNullableArrayField").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<TestResponseBody>() {
           @Override
           public void write(JsonWriter out, TestResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TestResponseBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TestResponseBody instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else { // non-primitive type
                   instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TestResponseBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TestResponseBody
  * @throws IOException if the JSON string is invalid with respect to TestResponseBody
  */
  public static TestResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestResponseBody.class);
  }

 /**
  * Convert an instance of TestResponseBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

